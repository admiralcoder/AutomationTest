C:\Users\ir\newworkspace\test-automation-sfm\src\main\resources\conf\env\test.xml

<?xml version="1.0" encoding="UTF-8"?>
<environment>

	<object id="app">
		<login_url>httpS://dlv-a03-a010.fanniemae.com:7076/idea/login</login_url>
	</object>

	<object id="ideagrid-server">
        <hostname>algrid-usas-gc02</hostname>
        <userid>fe4test</userid>
        <password>VDNzdF91c3I=</password>
        <scriptpath>/appl/fe4test/Python_Code/</scriptpath>
        <caserootdir>/appl/fe4test/</caserootdir>
        <testdirstructure>/appl/fe4test/lfm201601/</testdirstructure>
        <xmlpath>/appl/fe4test/fe4_data_t/xml/</xmlpath>
        <mastercontrollerenv>test</mastercontrollerenv>
        <attrdirstructure>/appl/fe4test/lfm201601_attr</attrdirstructure>
        <basepopdatapath>/appl/fe4test/fe4_data_t/</basepopdatapath>
        <hpfpath>/appl/fe4test/at6_data_p/hpf/201601/</hpfpath>
        <IRdatapath>/appl/fe4test/fe4_data_t/lfm_201601/basepop_case_1/inputs/</IRdatapath>
        <proddatapath>/appl/lw_data_t/lwtest/lfm/</proddatapath>
        <casereconscriptpath>/appl/fe4test/IDEA_HOME/code/test_code/</casereconscriptpath>
        <ccfadoublemount>/appl/m5_data_d_s/sf3/ccfa/</ccfadoublemount>
		<inputfilepath>/appl/fe4test/sfmtest/sfm_data_t/sfmtest/</inputfilepath>
		<paramfilepath>/appl/fe4test/sfmtest/SFM_PARMS_HOMES/</paramfilepath>
   	</object>

	<object id="idea">
		<drivername>oracle.jdbc.driver.OracleDriver</drivername>
		<url>jdbc:oracle:thin:@tcredit01:1521:TOR_CP01</url>
		<username>fe4dbot</username>
		<password>ZmU0VF9kYjA=</password>
		<accesstounderlyingconnectionallowed>true</accesstounderlyingconnectionallowed>
		<maxidle>5</maxidle>
		<removeabandoned>true</removeabandoned>
	</object>

 	<object id="db-server">
        <hostname>tcredit01</hostname>
        <userid>fe4test</userid>
        <password>VDNzdF91c3I=</password>
        <scriptpath>/appl/fe4test/</scriptpath> 
   	</object>
  	
   <object id="netezza">
		<drivername>org.netezza.Driver</drivername>
		<url>jdbc:netezza://dsysadm-unz01:5480/IDEA_VDM_DEV</url>
		<username>fe4dbod</username>
		<password>RHZsQDIxMjE=</password>
		<accesstounderlyingconnectionallowed>true</accesstounderlyingconnectionallowed>
		<maxidle>5</maxidle>
		<removeabandoned>true</removeabandoned>
	</object>

	<object id="sas">
		<drivername>com.sas.rio.MVADriver</drivername>
		<url>jdbc:sasiom://plgrid-usasce11.fanniemae.com:8594</url>
		<username>fe4test</username>
        <password>VDNzdF91c3I=</password>
		<accesstounderlyingconnectionallowed>true</accesstounderlyingconnectionallowed>
		<maxidle>5</maxidle>
		<removeabandoned>true</removeabandoned>
		<ccfa>/appl/at6_data_p/ccfa/lfm/201806</ccfa>
	</object>
	
	<object id="FDMStagingArea-server">
		<hostname>tlp-a22-a001a</hostname>
		<username>fe4test</username>
        <password>VDNzdF91c3I=</password>
		<staginglocation>/appl/fpetest/infa_shared/StgFiles/SFM/</staginglocation>
		<archiveDir>/appl/fpetest/infa_shared/Archive/SFM/</archiveDir>
		<srclocation>/appl/fpetest/infa_shared/SrcFiles/SFM/</srclocation>
		<accostaginglocation>/appl/fpetest/infa_shared/StgFiles/ACCO/</accostaginglocation>
		<accoarchiveDir>/appl/fpetest/infa_shared/Archive/ACCO/</accoarchiveDir>
		<accosrclocation>/appl/fpetest/infa_shared/SrcFiles/ACCO/</accosrclocation>
	</object>
</environment>



C:\Users\ir\newworkspace\test-automation-sfm\src\main\resources\conf\localConf.properties

## Generic Info
env=test
#internet explorer, safari, chrome, firefox
browser=chrome
logLevel=debug
takeScreenShots=true

## Execution Host Specification
#seleniumHub=localhost
## OR ##
##################################### 
seleniumHub=saucelabs
seleniumHubPort=4569
# #Browser version - ie 11, firefox 45, chrome 67
version=66
# Windows XP, Windows 8.1, OSX 10.10, Linux
os=Windows 10
proxyHost=zsproxy.fanniemae.com
proxyPort=10479
sauceUsername=sso-fm-Sfm_user
sauceKey=0fcffa0e-58c0-4724-a96d-336d1714f49d
parentSauceTunnel=sso-fm-saucelabs_automation
#sauceTunnel=fm_tunnel
sauceTunnel=master_tunnel
idleTimeout=1000
maxInstances=1
###################################

## Run For The Record Specification
# if runForTheRecord is true, after the test suite is complete
# the cucumber reports directory is packaged as a zip file and saved
# to dir as defined by runForTheRecordSavePath
jiraUrl=http://jira
jiraUsername=sfmusr
jiraPassword=VDNzdF91c3I=
issueKey=CFTRSEAR01
#if runforrecord is true, it uploads the test result to JIRA
runForTheRecord=false
runForTheRecordZipfilename=20161021.zip
runForTheRecordSavePath=c:\\data

# if both progression and regression are true then regression takes precedence

# if regression is true then 
#    runForTheRecord=false
#    runForTheRecordZipfilename=<timestamp>_regression.zip
regression=false

# if progression is true then
#    runForTheRecord=true
#    runForTheRecordZipfilename=<timestamp>_progression.zip
progression=true
####################################


C:\Users\ir\newworkspace\test-automation-sfm\src\main\resources\conf\users.xml

<?xml version="1.0" encoding="UTF-8"?>

<users>
	<user>
	   <type>Loss Forecast Business Analyst</type>
	   <username>usr001</username>
	   <password>amowMDM=</password>
	</user> 
	
	<user>
	  <type>Idea General User</type>
	  <username>fe4usr</username>
	  <password>VDNzdF91c3I=</password>
	</user>
	
	<user>
	  <type>Idea Manager</type>
	  <username>fe4mgr</username>
	  <password>VDNzdF91c3I=</password>
	</user>
	
	<user>
	  <type>Idea Read Only User</type>
	  <username>fe4r_o</username>
	  <password>VDNzdF91c3I=</password>
	</user>
	
	<user>
	  <type>Idea Developer</type>
	  <username>fe4dvl</username>
	  <password>VDNzdF91c3I=</password>
	</user>
	
	<user>
	  <type>Idea Admin</type>
	  <username>fe4adm</username>
	  <password>VDNzdF91c3I=</password>
	</user>
	
	<user>
	  <type>Idea Certify</type>
	  <username>fe4crt</username>
	  <password>VDNzdF91c3I=</password>
	</user>
	
	<user>
	  <type>Invalid user</type>
	  <username>xxxxxx</username>
	  <password>amowMDM=</password>
	</user>
	
	<user>
	  <type>Unregistered User</type>
	  <username>fe4devl</username>
	  <password>VDNzdF91c3I=</password>
	</user>
</users>


C:\Users\ir\newworkspace\test-automation-sfm\src\main\resources\data\InputFiles\test\ALF_201704_golden_config_draft.xlsx



C:\Users\ir\newworkspace\test-automation-sfm\src\main\resources\features



@174
Feature:As a SFM Stakeholder,
  I want to correct the methodology used to adjust new acquisitions' UPB
  So that the model forecast will hit the new acquisition forecast target

  @US1741 @cleanupBasepopCase @createCaseCleanupList @cleanupCase
  Scenario: difference between new_acq_UPB and the target_acq_UPB is less than or equal to 0.0005 and model ran for less than or equal to defined iteration (Iteration defined is 3)
    Given an "idea" case is created by service with the following:
      | name                      | userId | forecastMonth | type | parent                          | description                           | status | shared | certified | advanced | version |
      #  | BASE_POP_201806_US85_1 | fe4usr   | 201806        | BasePop  |                       | A test basepop case created by automation |         | N      | N         | N        | 5.1  |
      | SFM_201806_US174_Acq_test | fe4usr | 201806        | Sfm  | BASE_POP_201806_fds_baseline_fds_inputs | A test lfm case created by automation |        | N      | N         | N        | SFM 1.4 |
    Given "Idea General User" is authenticated
    And I choose the "Cases" tab
    And I choose the "User" tab
    And I enter "SFM_201806_US174_Acq_test" in the search
    And I click the "Edit" Action dropdown option for "idea" case "SFM_201806_US174_Acq_test"
    And I select the advance option
    And I enter a "file" "advanced_options" of "SFM_201806_IFG_Prod_0.xlsx"
    And I select to "update" the case
    And I click the "Execute" Action dropdown option for "idea" case "SFM_201806_US174_Acq_test"
    And I select the "All Reports" checkbox for "all_reports"
    And I select the "All Reports" checkbox for "all_reports"
    And I select the "VAF validation framework execute" checkbox for "vaf_exe"
    And I select to "execute" the case
    And validate "idea" case "SFM_201806_US174_Acq_test" execution is "In Progress"
    And validate "idea" case "SFM_201806_US174_Acq_test" execution is "Completed with Warnings"
    And I validate that the "sfm" "check_refi_adjust1" "sas7bdat" "outdata" exists for "idea" case "SFM_201806_US174_Acq_test"
    And I validate that the "sfm" "check_refi_adjust2" "sas7bdat" "outdata" exists for "idea" case "SFM_201806_US174_Acq_test"
    And I validate that the "sfm" "check_refi_adjust3" "sas7bdat" "outdata" exists for "idea" case "SFM_201806_US174_Acq_test"
    And I validate that the "sfm" "check_pmm_adjust1" "sas7bdat" "outdata" exists for "idea" case "SFM_201806_US174_Acq_test"
    And I validate that the "sfm" "check_pmm_adjust2" "sas7bdat" "outdata" exists for "idea" case "SFM_201806_US174_Acq_test"
    And I validate that the "sfm" "check_pmm_adjust3" "sas7bdat" "outdata" exists for "idea" case "SFM_201806_US174_Acq_test"
    And I query the data for "sfm" "idea" case "SFM_201806_US174_Acq_test" from "sas" "outdata" "pmm_counts_esr1" "sas7bdat" "where":
      | selectcolumns              | filterclause           | endexpression |
      | act_dte                    | act_dte = '01JUN2018'd |               |
      | pmm_share as pmm_mkt_share |                        |               |
      | pmm as pmm_orig_fcst       |                        |               |
      | pmm_aqsn as pmm_target_upb |                        |               |
    And I apply the below equations in the "sfm" "pmm_counts_esr1" for the case "SFM_201806_US174_Acq_test"
      | calc_pmm_target_upb | pmm_mkt_share*pmm_orig_fcst |
    And I verify the value "calc_pmm_target_upb" in "pmm_counts_esr1" matches with the value "pmm_target_upb" in "pmm_counts_esr1" for the case "SFM_201806_US174_Acq_test"
  #  And I verify "pmm_counts_esr1.calc_pmm_target_upb" value matches the "pmm_counts_esr1.pmm_target_upb" in "SFM_201806_US174_Acq_test"
    And I query the data for "sfm" "idea" case "SFM_201806_US174_Acq_test" from "sas" "inputs" "refi_aqsn_drr_scale_201806" "sas7bdat" "where":
      | selectcolumns   | filterclause      | endexpression |
      | date as act_dte | date='01JUN2018'd |               |
      | Refi_recap      |                   |               |
    And I query the data for "sfm" "idea" case "SFM_201806_US174_Acq_test" from "sas" "outdata" "lfm_201806_bs_tv" "sas7bdat" "where":
      | selectcolumns                    | filterclause         | endexpression    |
      | act_dte                          | status_p = 'R'       | group by act_dte |
      | sum(tv_upb2*wgt) as sfm_refi_Liq | act_dte='01JUN2018'd |                  |
    And I apply the below equations in the "sfm" "lfm_201806_bs_tv" for the case "SFM_201806_US174_Acq_test"
      | calc_refi_target_upb | sfm_refi_Liq*Refi_recap |
    And I query the data for "sfm" "idea" case "SFM_201806_US174_Acq_test" from "sas" "outdata" "check_refi_adjust1" "sas7bdat" "where":
      | selectcolumns                | filterclause | endexpression |
      | diff_from_1 as refi_diff_1   |              |               |
      | adj_check                    |              |               |
      | iteration as refi_iter       |              |               |
      | refi_target_upb              |              |               |
      | adj_orig_amt as refi_adj_amt |              |               |
      | refi_all_loan_sum            |              |               |
      | refi_reach_limit_sum         |              |               |
    And I verify the value "calc_refi_target_upb" in "lfm_201806_bs_tv" matches with the value "refi_target_upb" in "check_refi_adjust1" for the case "SFM_201806_US174_Acq_test"
    And I query the data for "sfm" "idea" case "SFM_201806_US174_Acq_test" from "sas" "outdata" "check_pmm_adjust1" "sas7bdat" "where":
      | selectcolumns               | filterclause | endexpression |
      | diff_from_1 as pmm_diff_1   |              |               |
      | adj_check                   |              |               |
      | iteration as pmm_iter       |              |               |
      | pmm_target_upb              |              |               |
      | adj_orig_amt as pmm_adj_amt |              |               |
      | pmm_all_loan_sum            |              |               |
      | pmm_reach_limit_sum         |              |               |
    And I apply the below equations in the "sfm" "check_pmm_adjust1" for the case "SFM_201806_US174_Acq_test" for "pmm_iter" "1"
      | calc_pmm_loan_limit | (pmm_target_upb-pmm_reach_limit_sum)/(pmm_all_loan_sum-pmm_reach_limit_sum) |
    And I apply the below equations in the "sfm" "check_pmm_adjust1" for the case "SFM_201806_US174_Acq_test" for "pmm_iter" "1"
      | calc_pmm_adj_fac | (pmm_target_upb/pmm_all_loan_sum)-1 |
    And I apply the below equations in the "sfm" "check_refi_adjust1" for the case "SFM_201806_US174_Acq_test" for "refi_iter" "1"
      | calc_refi_loan_limit | (refi_target_upb-refi_reach_limit_sum)/(refi_all_loan_sum-refi_reach_limit_sum) |
    And I apply the below equations in the "sfm" "check_refi_adjust1" for the case "SFM_201806_US174_Acq_test" for "refi_iter" "1"
      | calc_refi_adj_fac | (refi_target_upb/refi_all_loan_sum)-1 |
    #pmm
    And I verify "calc_refi_adj_fac" in "check_refi_adjust1" is "lessthanorequals" to "refi_diff_1" in "check_refi_adjust1" for the case "SFM_201806_US174_Acq_test" for "refi_iter" "1"
    And I verify "refi_adj_amt" in "check_refi_adjust1" is "equals" to the constant value "1" for the case "SFM_201806_US174_Acq_test" for "refi_iter" "1"
    #refi
    And I verify "calc_pmm_adj_fac" in "check_pmm_adjust1" is "lessthanorequals" to "pmm_diff_1" in "check_pmm_adjust1" for the case "SFM_201806_US174_Acq_test" for "pmm_iter" "1"
    And I verify "pmm_adj_amt" in "check_pmm_adjust1" is "equals" to the constant value "1" for the case "SFM_201806_US174_Acq_test" for "pmm_iter" "1"

    #Iteration2
    And I apply the below equations in the "sfm" "check_pmm_adjust1" for the case "SFM_201806_US174_Acq_test" for "pmm_iter" "2"
      | calc_pmm_loan_limit | (pmm_target_upb-pmm_reach_limit_sum)/(pmm_all_loan_sum-pmm_reach_limit_sum) |
    And I apply the below equations in the "sfm" "check_pmm_adjust1" for the case "SFM_201806_US174_Acq_test" for "pmm_iter" "2"
      | calc_pmm_adj_fac | (pmm_target_upb/pmm_all_loan_sum)-1 |
    And I verify "check_pmm_adjust1" in "calc_pmm_adj_fac" is "lessthanorequals" to the constant value "0.005" for the case "SFM_201806_US174_Acq_test" for "pmm_iter" "2"
#    And I verify "0.0005" value "lessthanorequal" to "check_pmm_adjust1.calc_pmm_adj_fac" in "SFM_201806_US174_Acq_test" for "pmm_iter" "2"
#    And I verify "1" value "equals" to "check_pmm_adjust1.pmm_adj_amt" in "SFM_201806_US174_Acq_test" for "pmm_iter" "1"
#    And I verify the value  of "pmm_adj_amt" in "check_pmm_adjust1" equals to the constant value "1" for the sfm case "SFM_201806_US174_Acq_test" for "refi_iter" "2"
    #Refi
    And I apply the below equations in the "sfm" "check_refi_adjust1" for the case "SFM_201806_US174_Acq_test" for "refi_iter" "2"
      | calc_refi_loan_limit | (refi_target_upb-refi_reach_limit_sum)/(refi_all_loan_sum-refi_reach_limit_sum) |
    And I apply the below equations in the "sfm" "check_refi_adjust1" for the case "SFM_201806_US174_Acq_test" for "refi_iter" "2"
      | calc_refi_adj_fac | (refi_target_upb/refi_all_loan_sum)-1 |
#    And I verify "0.0005" value "lessthanorequal" to "check_refi_adjust1.calc_refi_adj_fac" in "SFM_201806_US174_Acq_test" for "refi_iter" "2"
#    And I verify the value  of "refi_adj_orig_amt" in "check_refi_adjust1" equals to constant value "0" for the sfm case "SFM_201806_US174_Acq_test" for "refi_iter" "2"
#    And I verify "0" value "equals" to "check_refi_adjust1.refi_adj_orig_amt" in "SFM_201806_US174_Acq_test" for "refi_iter" "2"

    #Iteration3
    And I apply the below equations in the "sfm" "check_pmm_adjust1" for the case "SFM_201806_US174_Acq_test" for "pmm_iter" "3"
      | calc_pmm_loan_limit | (pmm_target_upb-pmm_reach_limit_sum)/(pmm_all_loan_sum-pmm_reach_limit_sum) |
    And I apply the below equations in the "sfm" "check_pmm_adjust1" for the case "SFM_201806_US174_Acq_test" for "pmm_iter" "3"
      | calc_pmm_adj_fac | (pmm_target_upb/pmm_all_loan_sum)-1 |
#    And I verify "0.0005" value "lessthanorequal" to "check_pmm_adjust1.calc_pmm_adj_fac" in "SFM_201806_US174_Acq_test" for "pmm_iter" "3"
#    And I verify "0" value "equals" to "check_pmm_adjust1.pmm_adj_amt" in "SFM_201806_US174_Acq_test" for "pmm_iter" "1"
    And I apply the below equations in the "sfm" "check_refi_adjust1" for the case "SFM_201806_US174_Acq_test" for "refi_iter" "3"
      | calc_refi_loan_limit | (refi_target_upb-refi_reach_limit_sum)/(refi_all_loan_sum-refi_reach_limit_sum) |
    And I apply the below equations in the "sfm" "check_refi_adjust1" for the case "SFM_201806_US174_Acq_test" for "refi_iter" "3"
      | calc_refi_adj_fac | (refi_target_upb/refi_all_loan_sum)-1 |
#    And I verify "0.0005" value "lessthanorequal" to "check_refi_adjust1.calc_refi_adj_fac" in "SFM_201806_US174_Acq_test" for "refi_iter" "3"

   # And I verify "check_refi_adjust1.refi_adj_orig_amt" value "equals" to "0" in "SFM_201806_US174_Acq_test" for "refi_iter" "3"
    And I verify "refi_adj_orig_amt" in "check_refi_adjust1" is "equals" to the constant value "0" for the case "SFM_201806_US174_Acq_test" for "refi_iter" "2"
    And I query the data for "sfm" "idea" case "SFM_201806_US174_Acq2_test" from "sas" "outdata" "check_pmm_adjust1" "sas7bdat" "where":
      | selectcolumns                      | filterclause | endexpression |
      | count(iteration) as pmm_201806_Itr |              |               |
    And I query the data for "sfm" "idea" case "SFM_201806_US174_Acq2_test" from "sas" "outdata" "check_refi_adjust1" "sas7bdat" "where":
      | selectcolumns                       | filterclause | endexpression |
      | count(iteration) as refi_201806_Itr |              |               |
#    And I verify "pmm_201806_Itr" in "check_pmm_adjust1" is "lessthanorequal" to "4" for the sfm case "SFM_201806_US174_Acq2_test"
#    And I verify "4" value "lessthanorequal" to "check_pmm_adjust1.pmm_201806_Itr" in "SFM_201806_US174_Acq_test"
#    And I verify "4" value "lessthanorequal" to "check_pmm_adjust1.pmm_201806_Itr" in "SFM_201806_US174_Acq_test"



C:\Users\ir\newworkspace\test-automation-sfm\src\test\java\com\fanniemae\sfm\automation\configs\SFMConstants.java

package com.fanniemae.sfm.automation.configs;

/**
 * Created by  on 6/2/2018. xml attributes constants
 */
public interface SFMConstants {

	String APP = "app";

	String LOGIN_URL = "login_url";

	String GRID_SERVER = "ideagrid-server";

	String HOST_NAME = "hostname";

	String USER_ID = "username";

	String PASSWORD = "password";

	String SCRIPT_PATH = "scriptpath";

	String CASE_ROOT_PATH = "caserootdir";

	String TEST_DIR_STRUCTURE = "testdirstructure";

	String XML_PATH = "xmlpath";

	String MASTER_CONTROLLER_ENV = "mastercontrollerenv";

	String ATTR_DIR_STRUCTURE = "attrdirstructure";

	String GRID_DATA_PATH = "basepopdatapath";

	String HPF_PATH = "hpfpath";

	String IR_DATA_PATH = "IRdatapath";

	String PROD_DATA_PATH = "proddatapath";

	String CASE_RECON_SCRIPT_PATH = "caseresonscriptpath";

	String CCFA_DOUBLE_MOUNT = "ccfadoublemount";

	String INPUT_FILE_PATH = "inputfilepath";

	String PARAM_FILE_PATH = "paramfilepath";

	String FDM_STAGING = "FDMStagingArea-server";

	String STAGING_LOCATION = "staginglocation";

	String ARCHIVE_STAGING_LOCATION = "archiveDir";

	String SRC_STAGING_LOCATION = "srclocation";
	String ACCO_STAGING_LOCATION = "accostaginglocation";

	String ACCO_ARCHIVE_STAGING_LOCATION = "accoarchiveDir";

	String ACCO_SRC_STAGING_LOCATION = "accosrclocation";
	String INFORMATICA = "informatica";

	String FILE_PATH = "filepath";

	String DATA_PATH = "data";

	String INPUT_PATH = "InputFiles";

	String LIBS = "libs";

	String WEB_DRIVER = "webdriver";
}

C:\Users\ir\newworkspace\test-automation-sfm\src\test\java\com\fanniemae\sfm\automation\db

package com.fanniemae.sfm.automation.db;

import com.fanniemae.fbacore.automation.db.DAO;
import com.fanniemae.testeng.automation.utils.CucumberLogUtils;

import java.util.List;

/**
 * Created by  on 12/9/2018.
 */
public class OracleDAO {

    private static final String DBNAME="idea";

    public String getDataLoadStatus(String dbName, String caseId,String fName,String tableName) {
        DAO dao = null;
        String retDat=null;

        String sql = "";
        if(dbName.equalsIgnoreCase(DBNAME)) {
            List<String> returnList = null;
            try {
                dao = DAO.createInstance(dbName);
                sql = String.format("select dataload_stat_typ_id from %s where case_id= '%s' and  dataload_file_path like '%%%s%%' order by rec_last_upd_usr_dttm desc", tableName,caseId,fName);
            //    System.out.println(sql);
                returnList = dao.executeSingleColumnQuery(sql, "dataload_stat_typ_id");
                retDat=(String)returnList.get(0);
            } catch (Exception ex) {
                CucumberLogUtils.logFail("Failed to execute SQL:" + sql + " Exception:" + ex.toString(), false);
                return null;
            }
        }

        return retDat;
    }

}
C:\Users\ir\newworkspace\test-automation-sfm\src\test\java\com\fanniemae\sfm\automation\helpers\AbstractRunner.java

package com.fanniemae.sfm.automation.helpers;

/**
 * 
 */
public class AbstractRunner {
    static public String className;

    static public String suiteName;

    public static void setUp() {
    }
}

C:\Users\ir\newworkspace\test-automation-sfm\src\test\java\com\fanniemae\sfm\automation\helpers\RetrieveDirLocation.java

package com.fanniemae.sfm.automation.helpers;

import com.fanniemae.fbacore.automation.configs.EnvUtils;
import com.fanniemae.fbacore.automation.configs.FbacoreConstants;
import com.fanniemae.idea.automation.impls.CaseServiceImpl;
import com.fanniemae.sfm.automation.configs.SFMConstants;
import java.io.File;

/**
 * Created by  on 4/19/2018.
 */
public class RetrieveDirLocation {

	public static String getBaseDirectory(String caseType, String oracleDB, String jobName) {
		String[] arrSplit = jobName.split("_");
		// System.out.println("RetrieveDirLocation.getBaseDirectory " +
		// oracleDB);
		String sourcePath = "";

		if (jobName.contains("BASE_POP")) {
			sourcePath = EnvUtils.getElementValue(SFMConstants.GRID_SERVER, SFMConstants.GRID_DATA_PATH) + "lfm_"
					+ arrSplit[2] + "/" + caseType + "_case_" + CaseServiceImpl.getCaseId(oracleDB, jobName) + "/";
		} else {
			sourcePath = EnvUtils.getElementValue(SFMConstants.GRID_SERVER, SFMConstants.GRID_DATA_PATH) + "lfm_"
					+ arrSplit[1] + "/" + caseType + "_case_" + CaseServiceImpl.getCaseId(oracleDB, jobName) + "/";
		}

		System.out.println("RetrieveDirLocation.getBaseDirectory " + sourcePath);
		// sourcePath ="/appl/sfmtest/users/sfmtest/sfm_201701/"; // for unit
		// testing @kvr
		return sourcePath;
	}

	public static String getFullFilePath(String filename) {
		String extension = ".xlsx";
		return EnvUtils.getReportsDir(FbacoreConstants.ROOT_DIR, FbacoreConstants.REPORTS_PATH) + File.separator
				+ filename + extension;
	}

}

C:\Users\ir\newworkspace\test-automation-sfm\src\test\java\com\fanniemae\sfm\automation\impls\DataCalculationImpls.java

package com.fanniemae.sfm.automation.impls;

import com.fanniemae.fbacore.automation.db.SASDatabaseUtils;
import com.fanniemae.sfm.automation.utils.excel.ExcelException;
import com.fanniemae.sfm.automation.utils.excel.ExcelReader;
import com.fanniemae.sfm.automation.utils.excel.ExcelWriter;
import com.fanniemae.testeng.automation.utils.CucumberLogUtils;
import org.apache.log4j.Logger;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author 
 * @version 1.0
 * @since 10/11/2017
 *
 **/
public class DataCalculationImpls {

	private static Logger logger = Logger.getLogger(DataCalculationImpls.class);

	private static Pattern dynamicFormula = Pattern.compile("\\!(.*?)\\!");
	/**
	 * calculation application in the spreadsheet based on the formula from
	 * feature file. if "$" is specified in the formula variable then that is
	 * considered as constant and it takes the 1st value following the header as
	 * the constant value
	 *
	 * @param caseType
	 *            is the project name
	 * @param jobName
	 *            is the filename to look
	 * @param columnList
	 *            list of values for the formula and header under which this has
	 *            to be formulated
	 * @param fileName
	 *            acts as Sheetname and also the final result is written under
	 *            this sheet in the last column
	 */
	public void applyCalculation(String caseType, String jobName, Map<String, String> columnList, String fileName) {
		try {
			ExcelWriter ewriter = new ExcelWriter(SASDatabaseUtils.getFullFilePath(jobName), fileName, true);
			ewriter.applyCalculation(columnList, null, null);
		} catch (ExcelException ex) {
			// ex.printStackTrace();
			logger.error("Applying calculation resulted in issue in workbook " + ex.getWorkBook() + ".SheetName "
					+ ex.getSheet() + ".Rootcause:[" + ex.getErrorCode() + "]" + ex.getMessage(), ex);
			CucumberLogUtils
					.logFail(
							"Applying calculation resulted in issue in workbook " + ex.getWorkBook() + ".SheetName "
									+ ex.getSheet() + ".Rootcause:[" + ex.getErrorCode() + "]" + ex.getMessage(),
							false);

		}
	}

	/**
	 * calculation application in the spreadsheet based on the formula from
	 * feature file. if "$" is specified in the formula variable then that is
	 * considered as constant and it takes the 1st value following the header as
	 * the constant value
	 *
	 * @param caseType
	 *            is the project name
	 * @param jobName
	 *            is the filename to look
	 * @param columnList
	 *            list of values for the formula and header under which this has
	 *            to be formulated
	 * @param fileName
	 *            acts as Sheetname and also the final result is written under
	 *            this sheet in the last column
	 * @param conditionName
	 *            //TODO
	 * @param conditionValue
	 *            //TODO
	 */
	public void applyCalculation(String caseType, String jobName, Map<String, String> columnList, String fileName,
			String conditionName, String conditionValue) {
		try {
			ExcelWriter ewriter = new ExcelWriter(SASDatabaseUtils.getFullFilePath(jobName), fileName, true);
			ewriter.applyCalculation(columnList, conditionName, conditionValue);
		} catch (ExcelException ex) {
			// ex.printStackTrace();
			logger.error("Applying calculation resulted in issue in workbook " + ex.getWorkBook() + ".SheetName "
					+ ex.getSheet() + ".Rootcause:[" + ex.getErrorCode() + "]" + ex.getMessage(), ex);
			CucumberLogUtils
					.logFail(
							"Applying calculation resulted in issue in workbook " + ex.getWorkBook() + ".SheetName "
									+ ex.getSheet() + ".Rootcause:[" + ex.getErrorCode() + "]" + ex.getMessage(),
							false);

		}
	}

	/**
	 * calculation application in the spreadsheet based on the formula from
	 * feature file. if "$" is specified in the formula variable then that is
	 * considered as constant and it takes the 1st value following the header as
	 * the constant value
	 *
	 *
	 *            //TODO
	 */
	public void applyCalculation(String caseType, String sheetOne, String conditionNameOne, String sheetTwo,String conditionNameTwo,String workbookName,
								 Map<String, String> columnList) {
		try {
			String filePath=SASDatabaseUtils.getFullFilePath(workbookName);
			ExcelReader excelReader = new ExcelReader(filePath);
			List<Map<String,String>> data= excelReader.getAllCellValues(sheetTwo);
			excelReader =null;
			Map<String,String> tempForm = new HashMap<String,String>();

			String strFormula;
			for (String key : columnList.keySet()) {
				Matcher m = dynamicFormula.matcher(columnList.get(key));
				ExcelWriter ewriter = new ExcelWriter(filePath, sheetOne, true);
				for (Map<String,String> rows : data) {
					//	ExcelWriter ewriter = new ExcelWriter("C:\\Users\\\\SFM_IntelliJ_Workspace\\test-automation-sfm\\target\\NonReoNonTaxDispositionCostRunner\\SEV_201806_prod_1_NewFiles.xlsx", SheetOne, true);
				//	ExcelWriter ewriter = new ExcelWriter(filePath, sheetOne, true);
					strFormula = columnList.get(key);
					while(m.find())
					{
						//	System.out.println("DataCalculationImpls.applyCalculation " + " group  "+m.group(1) +" = "+ rows.get(m.group(1)));
						strFormula = strFormula.replaceAll(("!"+m.group(1)+"!"), rows.get(m.group(1)));
						//	System.out.println(strFormula);
					}
					m.reset();
					//	System.out.println("colname : " + strFormula);
					tempForm.put(key,strFormula);
				//	ewriter.applyCalculation(tempForm,conditionNameOne,rows.get(conditionNameTwo));
					ewriter.applyNoFileClose(tempForm,conditionNameOne,rows.get(conditionNameTwo));
				}
				ewriter.writeAndClose();
				ewriter=null;
				tempForm.clear();
			}


		} catch (ExcelException ex) {
			// ex.printStackTrace();
			logger.error("Applying calculation resulted in issue in workbook " + ex.getWorkBook() + ".SheetName "
					+ ex.getSheet() + ".Rootcause:[" + ex.getErrorCode() + "]" + ex.getMessage(), ex);
			CucumberLogUtils
					.logFail(
							"Applying calculation resulted in issue in workbook " + ex.getWorkBook() + ".SheetName "
									+ ex.getSheet() + ".Rootcause:[" + ex.getErrorCode() + "]" + ex.getMessage(),
							false);

		}
	}

}

C:\Users\ir\newworkspace\test-automation-sfm\src\test\java\com\fanniemae\sfm\automation\impls\DataRetrievalImpls.java


package com.fanniemae.sfm.automation.impls;

import com.fanniemae.fbacore.automation.configs.EnvUtils;
import com.fanniemae.fbacore.automation.configs.FbacoreConstants;
import com.fanniemae.fbacore.automation.db.DAO;
import com.fanniemae.fbacore.automation.db.SASDatabaseUtils;
import com.fanniemae.fbacore.automation.helpers.AbstractRunner;
import com.fanniemae.sfm.automation.helpers.RetrieveDirLocation;
import com.fanniemae.fbacore.automation.helpers.QueryDTO;
import com.fanniemae.sfm.automation.utils.excel.ExcelReader;
import com.fanniemae.sfm.automation.utils.excel.ExcelWriter;
import com.fanniemae.testeng.automation.db.DbField;
import com.fanniemae.testeng.automation.exceptions.TestingException;
import com.fanniemae.testeng.automation.utils.CucumberLogUtils;
import org.apache.log4j.Logger;
import java.util.*;

/**
 *
 * @author 
 * @version 1.0
 * @since 10/11/2017
 *
 **/
public class DataRetrievalImpls {

	private static Logger logger = Logger.getLogger(DataRetrievalImpls.class);

	/**
	 * A method to retrieve multiple column data from the SAS dataset takes the
	 * one parameter of where clause to take the oondition column to result the dataset
	 * 
	 * @param caseType
	 * @param columnList
	 * @param oracleDB
	 * @param sasDB
	 * @param jobName
	 * @param subDir
	 * @param fileName
	 * @param fileType
	 * @param conditionColumn
	 * @param conditionValue
	 */

	public void retrieveColumnDataImpls(String caseType, String jobName, List<String> columnList, String oracleDB,
			String sasDB, String subDir, String fileName, String fileType, String conditionColumn,
			String conditionValue) {
		// SASDAO sasdao = null;
		// temporarily modified the code to use the linkedhashmap in dependency @KKR
		com.fanniemae.sfm.automation.tmpoveride.DAO sasdao = null;

		List<Map<String, DbField>> columnValues;

		String query;
		String datasetName = fileName + "." + fileType;
		System.out.println("DataRetrievalImpls.retrieveColumnDataImpls");

		try {


				query = com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.queryBuilder(columnList, subDir, fileName) + " WHERE " + conditionColumn + " = "
						+ conditionValue;
				logger.info("Query: " + query);

			System.out.println(query);

			sasdao = com.fanniemae.sfm.automation.tmpoveride.DAO.createInstance(sasDB, RetrieveDirLocation.getBaseDirectory(caseType, oracleDB, jobName),
					subDir);
			// sasdao = FbaDAO.createInstance(SASDatabaseUtils.getDBName(dbName,
			// Constants.SAS_DB),
			// RetrieveDirLocation.getBaseDirectory(caseType,
			// SASDatabaseUtils.getDBName(dbName, Constants.IDEA_DB), jobName),
			// subDir);
			System.out.println("DataRetrievalImpls.retrieveColumnDataImpls 5");
			columnValues = sasdao.executeQuery(query);
			logger.debug("val " + columnValues);

			if (columnValues.size() > 0) {
                //ExcelWriter ewriter = new ExcelWriter(SASDatabaseUtils.getFullFilePath(jobName), fileName, false);
                ExcelWriter ewriter = new ExcelWriter(com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.getFullFilePath2(jobName), fileName, false);
                ewriter.writedb2Excel(columnValues);
				CucumberLogUtils.logPass("Data retrieved from SAS Dataset" + datasetName, false);
			} else {
				CucumberLogUtils.logError("Some of the column does not have value in it" + columnList);
				CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset" + fileName + "." + fileType, false);
			}
		} catch (TestingException t) {
			t.printStackTrace();
			logger.error("Some error in the query", t);
			CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset " + fileName + "." + fileType, false);
		} catch (Exception e) {
			 e.printStackTrace();
			logger.error("Some error in the query", e);
			CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset " + fileName + "." + fileType, false);
		}

	}
	/*
	Purpose: Method to return the list of columns without any condition
	 */
	public void retrieveColumnDataImpls(String caseType, String jobName, List<String> columnList, String oracleDB,
										String sasDB, String subDir, String fileName, String fileType) {
		// SASDAO sasdao = null;
		// temporarily modified the code to use the linkedhashmap in dependency @KKR
		com.fanniemae.sfm.automation.tmpoveride.DAO sasdao = null;

		List<Map<String, DbField>> columnValues;
		String query;
		String datasetName = fileName + "." + fileType;
		System.out.println("DataRetrievalImpls.retrieveColumnDataImpls");

		try {
			query=com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.queryBuilder(columnList, subDir, fileName);
//			query = SASDatabaseUtils.queryBuilder(columnList, subDir, fileName);
			logger.info("Query: " + query);
			System.out.println(query);

			sasdao = com.fanniemae.sfm.automation.tmpoveride.DAO.createInstance(sasDB, RetrieveDirLocation.getBaseDirectory(caseType, oracleDB, jobName),
					subDir);
			// sasdao = FbaDAO.createInstance(SASDatabaseUtils.getDBName(dbName,
			// Constants.SAS_DB),
			// RetrieveDirLocation.getBaseDirectory(caseType,
			// SASDatabaseUtils.getDBName(dbName, Constants.IDEA_DB), jobName),
			// subDir);
			System.out.println("DataRetrievalImpls.retrieveColumnDataImpls 6");
			columnValues = sasdao.executeQuery(query);
			logger.debug("val " + columnValues);
			if (columnValues.size() > 0) {
                //ExcelWriter ewriter = new ExcelWriter(SASDatabaseUtils.getFullFilePath(jobName), fileName, false);
                ExcelWriter ewriter = new ExcelWriter(com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.getFullFilePath2(jobName), fileName, false);

				ewriter.writedb2Excel(columnValues);
				CucumberLogUtils.logPass("Data retrieved from SAS Dataset" + datasetName, false);
			} else {
				CucumberLogUtils.logError("Some of the column does not have value in it" + columnList);
				CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset" + fileName + "." + fileType, false);
			}
		} catch (TestingException t) {
			t.printStackTrace();
			logger.error("Some error in the query", t);
			CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset due to Testing Exception Occured" + fileName + "." + fileType, false);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Some error in the query", e);
			CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset due to an Exception " + fileName + "." + fileType, false);
		}

	}

	/**
	 * "outdata,basedata" "fileone, filetwo,filethree" scenario-1 :
	 * outdata.fileone,basedata.filetwo,outdata.filethree" "outdata,basedata"
	 * "fileone" scenario-1 :
	 * outdata.fileone,basedata.filetwo,outdata.filethree"
	 *
	 * @param columnList
	 * @param subDir
	 * @param fileName
	 * @return
	 */

	public void retrieveColumnDataImpls(String caseType, String oracleDB, String caseName, String sasDB, String subDir,
			String fileName, String fileType, String filterClause, String conditionColumn1, String conditionValue1,
			String filterLogic, String conditionColumn2, String conditionValue2, List<String> columnList) {
		DAO sasdao = null;
		List<Map<String, DbField>> columnValues;
		String query;
		String datasetName = fileName + "." + fileType;

		try {

			query = com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.queryBuilder(columnList, subDir, fileName) + " " + filterClause + " "
					+ conditionColumn1 + " = " + conditionValue1 + " " + filterLogic + " " + conditionColumn2 + " = "
					+ conditionValue2;
			logger.info("Query: " + query);

			sasdao = DAO.createInstance(sasDB, RetrieveDirLocation.getBaseDirectory(caseType, oracleDB, caseName),
					subDir);
			System.out.println("DataRetrievalImpls.retrieveColumnDataImpls 6");
			// sasdao =
			// DAO.createInstance(SASDatabaseUtils.getDBName(dbName,Constants.SAS_DB),RetrieveDirLocation.getBaseDirectory(caseType,SASDatabaseUtils.getDBName(dbName,Constants.IDEA_DB),jobName),subDir);
			columnValues = sasdao.executeQuery(query);
			logger.debug("val " + columnValues);

			if (columnValues.size() > 0) {
                //ExcelWriter ewriter = new ExcelWriter(SASDatabaseUtils.getFullFilePath(caseName), fileName, false);
                ExcelWriter ewriter = new ExcelWriter(com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.getFullFilePath2(caseName), fileName, false);

				ewriter.writedb2Excel(columnValues);
				CucumberLogUtils.logPass("Data retrieved from SAS Dataset" + datasetName, false);
			} else {
				logger.error("Data was not retrieved from SAS Dataset" + datasetName);
				CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset" + datasetName, false);
			}
		} catch (Exception e) {
			logger.error("Some error in the query", e);
			CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset" + datasetName, false);
		}
	}

	/**
	 * This method takes the custom format of column QueryDTO object and builds
	 * the query and invokes the core framework for the data. following which
	 * writes the information to the excel spreadsheet
	 * 
	 * @param caseType
	 * @param jobName
	 * @param columnList
	 * @param sasDB
	 * @param clauseType
	 * @param oracleDB
	 * @param subDir
	 * @param fileName
	 * @param fileType
	 */
	public void retrieveColumnCustomObj(String caseType, String jobName, List<QueryDTO> columnList, String oracleDB,
			String sasDB, String subDir, String fileName, String fileType, String clauseType) {
		//DAO sasdao = null;
		com.fanniemae.sfm.automation.tmpoveride.DAO sasdao = null;
		List<Map<String, DbField>> columnValues;
		String query;
		String datasetName = fileName + "." + fileType;

		try {

			query = com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.getExecutableQuery(columnList, subDir, fileName, clauseType);
			CucumberLogUtils.logInfo("Query: " + query);
			CucumberLogUtils.logToConsole("Query: " + query);
			sasdao = com.fanniemae.sfm.automation.tmpoveride.DAO.createInstance(sasDB, RetrieveDirLocation.getBaseDirectory(caseType, oracleDB, jobName),
					subDir);

			//	sasdao = DAO.createInstance(sasDB, RetrieveDirLocation.getBaseDirectory(caseType, oracleDB, jobName),
			//		subDir);
			columnValues = sasdao.executeQuery(query);
			System.out.println("DataRetrievalImpls.retrieveColumnCustomObj 1");
			// columnValues = new ArrayList<Map<String,DbField>>();
			// System.out.println(columnValues);

			if (columnValues.size() > 0) {
                //ExcelWriter ewriter = new ExcelWriter(SASDatabaseUtils.getFullFilePath(jobName), fileName, false);
                ExcelWriter ewriter = new ExcelWriter(com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.getFullFilePath2(jobName), fileName, false);

				ewriter.writedb2Excel(columnValues);
				CucumberLogUtils.logPass("Data retrieved from SAS Dataset " + datasetName, false);
			} else {
				CucumberLogUtils.logError("Some error in the query");
				CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset " + datasetName, false);
			}
		}catch (TestingException t){
			CucumberLogUtils.logFail("Query not executed",t,false);
		}
		catch (Exception e) {

			CucumberLogUtils.logError("Some error in the query " + e.getMessage());
			CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset " + datasetName, false);
			e.printStackTrace();
		}
	}

//method to retrive the data using a join query - one library is fixed and other is dynamic lib ref
	public void retrieveColumnCustomObj(String caseType, String jobName, List<QueryDTO> columnList, String oracleDB,
										String sasDB, String subDir, String fileName, String fileType, String clauseType,String constDir,String constFilename) {
		//DAO sasdao = null;
		com.fanniemae.sfm.automation.tmpoveride.DAO sasdao = null;
		List<Map<String, DbField>> columnValues;
		String query;
		String datasetName = fileName + "." + fileType;

		try {

			query = com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.getExecutableQuery(columnList, subDir, fileName, clauseType,constDir,constFilename);
			CucumberLogUtils.logInfo("Query: " + query);
			CucumberLogUtils.logToConsole("Query: " + query);

			sasdao = com.fanniemae.sfm.automation.tmpoveride.DAO.createInstance(sasDB, RetrieveDirLocation.getBaseDirectory(caseType, oracleDB, jobName),
					subDir,constDir);

			//	sasdao = DAO.createInstance(sasDB, RetrieveDirLocation.getBaseDirectory(caseType, oracleDB, jobName),
			//		subDir);
			System.out.println("Before =====================");
			columnValues = sasdao.executeQuery(query);
			System.out.println("DataRetrievalImpls.retrieveColumnCustomObj 2");
			// columnValues = new ArrayList<Map<String,DbField>>();
			System.out.println("test =====================" + columnValues);

			if (columnValues.size() > 0) {
                //	ExcelWriter ewriter = new ExcelWriter(SASDatabaseUtils.getFullFilePath(jobName), fileName, false);
                ExcelWriter ewriter = new ExcelWriter(com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.getFullFilePath2(jobName), fileName, false);

				ewriter.writedb2Excel(columnValues);
				CucumberLogUtils.logPass("Data retrieved from SAS Dataset" + datasetName, false);
			} else {
				CucumberLogUtils.logError("Some error in the query");
				CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset" + datasetName, false);
			}
		}catch (TestingException t){
			CucumberLogUtils.logFail("Query not executed",t,false);
		}
		catch (Exception e) {

			CucumberLogUtils.logError("Some error in the query" + e.getMessage());
			CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset" + datasetName, false);
			e.printStackTrace();
		}
	}

	//This  method created for pico container experiment
	public void retrieveColumnDataImpls( List<String> columnList, String sasDB, String subDir, String fileName, String fileType,String baseDirectory,String appPath) {
		// SASDAO sasdao = null;
		// temporarily modified the code to use the linkedhashmap in dependency @KKR
		com.fanniemae.sfm.automation.tmpoveride.DAO sasdao = null;

		List<Map<String, DbField>> columnValues;
		String query;
		String datasetName = fileName + "." + fileType;
		System.out.println("DataRetrievalImpls.retrieveColumnDataImpls");

		try {

			query = com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.queryBuilder(columnList, subDir, fileName);
//			query=SASDatabaseUtils.queryBuilder(columnList, subDir, fileName);
			logger.info("Query: " + query);
			System.out.println(query);

			sasdao = com.fanniemae.sfm.automation.tmpoveride.DAO.createInstance(sasDB, baseDirectory,
					subDir);
			// sasdao = FbaDAO.createInstance(SASDatabaseUtils.getDBName(dbName,
			// Constants.SAS_DB),
			// RetrieveDirLocation.getBaseDirectory(caseType,
			// SASDatabaseUtils.getDBName(dbName, Constants.IDEA_DB), jobName),
			// subDir);
			System.out.println("DataRetrievalImpls.retrieveColumnDataImpls 4");
			columnValues = sasdao.executeQuery(query);
			logger.debug("val " + columnValues);

			if (columnValues.size() > 0) {
				ExcelWriter ewriter = new ExcelWriter(appPath, fileName, false);
				ewriter.writedb2Excel(columnValues);
				CucumberLogUtils.logPass("Data retrieved from SAS Dataset" + datasetName, false);
			} else {
				CucumberLogUtils.logError("Some of the column does not have value in it" + columnList);
				CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset" + fileName + "." + fileType, false);
			}
		} catch (TestingException t) {
			t.printStackTrace();
			logger.error("Some error in the query", t);
			CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset due to Testing Exception Occured" + fileName + "." + fileType, false);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Some error in the query", e);
			CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset due to an Exception " + fileName + "." + fileType, false);
		}

	}

	public String getBaseDirectory(String caseType, String oracleDB, String jobName){
		return RetrieveDirLocation.getBaseDirectory(caseType, oracleDB, jobName);
	}

	//added to set the maximum record to retrieve from the dataset
	public void retrieveColumnCustomObj(String caseType, String jobName, List<QueryDTO> columnList, String oracleDB,
										String sasDB, String subDir, String fileName, String fileType, String clauseType,String maxRec) {
		//DAO sasdao = null;
		System.out.println("DataRetrievalImpls.retrieveColumnCustomObj initial === " + FbacoreConstants.REPORTS_PATH);
		com.fanniemae.sfm.automation.tmpoveride.DAO sasdao = null;
		List<Map<String, DbField>> columnValues;
		String query;
		String datasetName = fileName + "." + fileType;

		try {

			query = com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.getExecutableQuery(columnList, subDir, fileName, clauseType);
			CucumberLogUtils.logInfo("Query: " + query);
			CucumberLogUtils.logToConsole("Query: " + query);
			sasdao = com.fanniemae.sfm.automation.tmpoveride.DAO.createInstance(sasDB, RetrieveDirLocation.getBaseDirectory(caseType, oracleDB, jobName),
					subDir);
			System.out.println("DataRetrievalImpls.retrieveColumnCustomObj 3");
			System.out.println("DataRetrievalImpls.retrieveColumnCustomObj step1 " + AbstractRunner.suiteName);
			if(maxRec==null) columnValues = sasdao.executeQuery(query);
				else columnValues = sasdao.executeQuery(query,maxRec);
			//	sasdao = DAO.createInstance(sasDB, RetrieveDirLocation.getBaseDirectory(caseType, oracleDB, jobName),
			//		subDir);
		//	columnValues = sasdao.executeQuery(query,maxRec);
			// columnValues = new ArrayList<Map<String,DbField>>();
			// System.out.println(columnValues);
			if (columnValues.size() > 0) {
				ExcelWriter ewriter = new ExcelWriter(com.fanniemae.sfm.automation.tmpoveride.SASDatabaseUtils.getFullFilePath2(jobName), fileName, false);
				ewriter.writedb2Excel(columnValues);
				CucumberLogUtils.logPass("Data retrieved from SAS Dataset " + datasetName, false);
			} else {
				CucumberLogUtils.logError("Some error in the query");
				CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset " + datasetName, false);
			}
		}catch (TestingException t){

			CucumberLogUtils.logFail("Query not executed",t,false);
		}
		catch (Exception e) {
			e.printStackTrace();
			CucumberLogUtils.logError("Some error in the query " + e.getMessage());
			CucumberLogUtils.logFail("Data was not retrieved from SAS Dataset " + datasetName, false);
			//e.printStackTrace();
		}
	}

}


C:\Users\ir\newworkspace\test-automation-sfm\src\test\java\com\fanniemae\sfm\automation\impls\DataValidationImpls.java

package com.fanniemae.sfm.automation.impls;

import com.fanniemae.fbacore.automation.configs.EnvUtils;
import com.fanniemae.fbacore.automation.db.DAO;
import com.fanniemae.fbacore.automation.db.SASDatabaseUtils;
import com.fanniemae.fbacore.automation.helpers.SheetVO;
//import com.fanniemae.sfm.automation.helpers.RetrieveDirLocation;
import com.fanniemae.idea.automation.configs.IdeaEnvUtils;
import com.fanniemae.idea.automation.impls.CaseServiceImpl;
import com.fanniemae.sfm.automation.db.OracleDAO;
import com.fanniemae.sfm.automation.helpers.RetrieveDirLocation;
import com.fanniemae.sfm.automation.utils.excel.ExcelException;
import com.fanniemae.sfm.automation.utils.excel.ExcelReader;
import com.fanniemae.sfm.automation.utils.excel.ExcelWriter;
import com.fanniemae.testeng.automation.common.SystemCredentials;
import com.fanniemae.testeng.automation.exceptions.TestingException;
import com.fanniemae.testeng.automation.utils.CucumberLogUtils;
import com.fanniemae.testeng.automation.utils.EncryptionUtils;
import com.fanniemae.testeng.automation.utils.SSHUtils;
import org.apache.log4j.Logger;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * @author 
 * @version 1.0
 * @since 10/11/2017
 **/
public class DataValidationImpls {

	private static Logger logger = Logger.getLogger(DataValidationImpls.class);

	enum Operators {



    /**
     * Returns corresponding string from given {@code blob}.
     *
     * This method will return {@code null} if {@code blob} is {@code null}.
     *
     * @param blob
     *            the Blob for which corresponding string is required.
     *
     * @return Returns the string value of blob.
     *
     * @throws SQLException
     *             if there is any error while reading string from blob.
     */
    public static String getStringFromBlob(Blob blob) throws SQLException {
        String str = null;
        byte[] blobArray = null;

        if (blob != null)
        {
            blobArray = blob.getBytes(1, (int) blob.length());
            str = new String(blobArray);
        }

        return str;
    }

    /**
     * Returns dbunit specific database connection
     *
     * @param clob
     *            the Clob for which corresponding string is required.
     *
     * @return Returns the string value of clob.
     *
     * @throws SQLException
     *             if there is any error while reading string from clob.
     */
    public static IDatabaseConnection getDBUnitConnection(Connection conn) throws Exception {
        return new DatabaseConnection(conn);
    }

    //For single row-column result
    public static String getUnitResult(Connection connection , String sQuery) throws Exception {

        String result = null;
        Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery(sQuery);

        // Fetch each row from the result set
        while (rs.next())
            // Get the data from the row using the column index
            result = rs.getString(1);
        rs.close();
        stmt.close();
        return result;
    }

    //For List (First column)
    public static List<String> getListResult(Connection connection , String sQuery) throws Exception{

        List<String> result = new LinkedList<String>();
        result = new ArrayList<String>();

        // Create a result set containing all data from my_table
        Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery(sQuery);

        // Fetch each row from the result set
        while (rs.next())
            result.add(rs.getString(1));
        rs.close();
        stmt.close();
        return result;
    }

    public static String buildINClauseString(List<String> valueList)
    {
        StringBuilder sb = new StringBuilder();

        for(int i = 0; i < valueList.size(); i++)
        {
            sb.append("'").append(valueList.get(i)).append("'");

            if(i < valueList.size() - 1)
            {
                sb.append(",");
            }
        }

        return sb.toString();
    }
}

C:\Users\ir\newworkspace\test-automation-sfm\src\test\java\com\fanniemae\sfm\automation\tmpoveride\SASDatabaseUtils.java

package com.fanniemae.sfm.automation.tmpoveride;

import com.fanniemae.fbacore.automation.configs.EnvUtils;
import com.fanniemae.fbacore.automation.configs.FbacoreConstants;
import com.fanniemae.fbacore.automation.helpers.AbstractRunner;
import com.fanniemae.fbacore.automation.helpers.QueryDTO;
import com.fanniemae.fbacore.automation.helpers.QueryDesigner;
import com.fanniemae.testeng.automation.utils.StringUtils;
import org.apache.log4j.Logger;

import java.io.File;
import java.util.List;

/**
 * Created by  on 11/4/2018.
 */
public class SASDatabaseUtils extends com.fanniemae.fbacore.automation.db.SASDatabaseUtils {

    private static Logger logger = Logger.getLogger(SASDatabaseUtils.class);

    /**
     * this method returns the libname when the subdir is having more than 8 characters.
     * As SAS supports max 8 charaters for libname, triming the subdir to 8 characters to use it as libname
     * returning a new libname string with 8 characters
     * @param subDir
     * @return
     */
    public static String getLibref(String subDir){
        String libref;
        if(subDir.length()>8){
            libref=subDir.substring(0,8);
        }else libref=subDir;
        return libref;
    }
    /**
     * returns a query after bringing in the combination of columns, "where"
     * clause and order/group by
     *
     * @param columnList
     * @param subDir
     * @param fileName
     * @return Fully formed query as string
     */
    public static String queryBuilder(List<String> columnList, String subDir, String fileName) {
        StringBuffer qry = new StringBuffer();
        subDir=getLibref(subDir);
        qry.append("SELECT ");
        qry.append(StringUtils.arrayListToStr(columnList, ","));
        qry.append(" FROM ");
        String[] fName = fileName.split(",");
        String[] aliasName = subDir.split(",");

        int increment = 0;
        int endVal = 1;
        if (fName.length >= aliasName.length) {
            String[] var8 = fName;
            int var9 = fName.length;

            for(int var10 = 0; var10 < var9; ++var10) {
                String str = var8[var10];
                qry.append(aliasName[increment]);
                qry.append(".");
                qry.append(str);
                if (endVal != fName.length) {
                    qry.append(",");
                }

                ++endVal;
                if (increment >= aliasName.length) {
                    increment = 0;
                }
            }
        }

        return qry.toString();
    }
    public static String getExecutableQuery(List<QueryDTO> columnList, String subDir, String fileName,
                                            String clauseType,String constDir,String cnstFilename) {
        QueryDesigner queryDesigner = new QueryDesigner(columnList);
        StringBuffer qry = new StringBuffer();
        subDir=getLibref(subDir);
        qry.append("SELECT ");
        //used StringUtils class from automation core to get the String appended with the given delimiter
        qry.append(StringUtils.arrayListToStr(queryDesigner.getColumns(), ","));
        qry.append(" FROM ");
        String[] fName = fileName.split(",");
        String[] aliasName = subDir.split(",");

        int increment = 0, endVal = 1;
        if (fName.length >= aliasName.length) {
            for (String str : fName) {
                qry.append(aliasName[increment]);
                qry.append(".");
                qry.append(str);
                if (endVal != fName.length)
                    qry.append(",");
                endVal++;
                if (increment >= aliasName.length)
                    increment = 0;
            }
        }
        if(cnstFilename!=null && !cnstFilename.isEmpty()){
            qry.append(",").append(constDir.split("\\.")[1]).append(".").append(cnstFilename);
        }
        // checking the conditionSize>0, because there may be a case where there
        // is no 'where' clause used in the query
        if (queryDesigner.getFilterConditions().size() > 0) {
            qry.append(" ").append(clauseType).append(" ");
            if (queryDesigner.isOrOperator()) {
                increment = 0;
                for (String condition : queryDesigner.getFilterConditions()) {
                    if (condition.toLowerCase().startsWith("or ", 0)) {
                        if (increment == 0)
                            qry.append(condition.replaceAll("or ", ""));
                        else
                            qry.append(" ").append(condition);

                    } else {
                        if (increment > 0)
                            qry.append(" and ").append(condition);
                        else
                            qry.append(condition);
                    }
                    increment++;
                    // System.out.println(qry);
                }
            } else {
                qry.append(StringUtils.arrayListToStr(queryDesigner.getFilterConditions(), " and "));
            }
        }
        // checking the endExpressionSize>0, as there may be a Query without the
        // end expression (OrderBy or GroupBy)
        if (queryDesigner.getEndExpression().size() > 0) {
            qry.append(" ");
            qry.append(StringUtils.arrayListToStr(queryDesigner.getEndExpression(), ","));
        }
        logger.info(qry.toString());
        return qry.toString();
    }



    /**
     * returns a query after bringing in the combination of columns, "where"
     * clause and order/group by
     *
     * @param columnList
     * @param subDir
     * @param fileName
     * @return Fully formed query as string
     */
    public static String getExecutableQuery(List<QueryDTO> columnList, String subDir, String fileName,
                                            String clauseType) {
        QueryDesigner queryDesigner = new QueryDesigner(columnList);
        StringBuffer qry = new StringBuffer();
        subDir=getLibref(subDir);
        qry.append("SELECT ");
        //used StringUtils class from automation core to get the String appended with the given delimiter
        qry.append(StringUtils.arrayListToStr(queryDesigner.getColumns(), ","));
        qry.append(" FROM ");
        String[] fName = fileName.split(",");
        String[] aliasName = subDir.split(",");

        int increment = 0, endVal = 1;
        if (fName.length >= aliasName.length) {
            for (String str : fName) {
                qry.append(aliasName[increment]);
                qry.append(".");
                qry.append(str);
                if (endVal != fName.length)
                    qry.append(",");
                endVal++;
                increment++;
                if (increment >= aliasName.length)
                    increment = 0;
            }
        }
        // checking the conditionSize>0, because there may be a case where there
        // is no 'where' clause used in the query
        if (queryDesigner.getFilterConditions().size() > 0) {
            qry.append(" ").append(clauseType).append(" ");
            if (queryDesigner.isOrOperator()) {
                increment = 0;
                for (String condition : queryDesigner.getFilterConditions()) {
                    if (condition.toLowerCase().startsWith("or ", 0)) {
                        if (increment == 0)
                            qry.append(condition.replaceAll("or ", ""));
                        else
                            qry.append(" ").append(condition);

                    } else {
                        if (increment > 0)
                            qry.append(" and ").append(condition);
                        else
                            qry.append(condition);
                    }
                    increment++;
                    // System.out.println(qry);
                }
            } else {
                qry.append(StringUtils.arrayListToStr(queryDesigner.getFilterConditions(), " and "));
            }
        }
        // checking the endExpressionSize>0, as there may be a Query without the
        // end expression (OrderBy or GroupBy)
        if (queryDesigner.getEndExpression().size() > 0) {
            qry.append(" ");
            qry.append(StringUtils.arrayListToStr(queryDesigner.getEndExpression(), ","));
        }
        logger.info(qry.toString());
        return qry.toString();
    }

    public static String getFullFilePath2(String filename) {
        String extension = ".xlsx";
        String REPORTS_PATH = "target" + File.separator + AbstractRunner.suiteName;
        return EnvUtils.getReportsDir("user.dir", REPORTS_PATH) + File.separator + filename + extension;
    }

}

C:\Users\ir\newworkspace\test-automation-sfm\src\test\java\com\fanniemae\sfm\automation\utils\excel\ExcelException.java

package com.fanniemae.sfm.automation.utils.excel;

import com.fanniemae.fbacore.automation.helpers.Constants;

/**
 * This is the base exception class for the excel related exceptions. Class has
 * difference constructors and uses the error codes too
 * 
 * @author 
 * @version 1.0
 * @since 6/21/2017
 *
 */
public class ExcelException extends Exception {

  // holds the work book name
  private String workBook;
  // holds the sheet name
  private String sheet;
  // error code and default is general exception code
  private int errorCode = Constants.GENERAL_ERROR;

  /**
   * Default custom exception class
   * 
   * @param msg
   *            custom message
   */
  public ExcelException(String msg) {
    super(msg);
  }

  /**
   * Custom exception class taking two parameter
   * 
   * @param msg
   *            in put as string
   * @param throwable
   *            base exception object
   */
  public ExcelException(String msg, Throwable throwable) {
    super(msg, throwable);
  }

  /**
   * Custom exception class taking three parameter
   * 
   * @param msg
   *            in put as string
   * @param errorCode
   *            as integer
   * @param throwable
   *            base exception object
   */
  public ExcelException(String msg, int errorCode, Throwable throwable) {
    super(msg, throwable);
    this.errorCode = errorCode;
  }

  /**
   * Custom exception class taking five parameter
   * 
   * @param msg
   *            as string
   * @param workbook
   *            workbookname as string
   * @param sheet
   *            sheet name as string
   * @param errorCode
   *            errorcode as integer
   * @param throwable
   *            as exceptoin object
   */
  public ExcelException(String msg, String workbook, String sheet, int errorCode, Throwable throwable) {
    super(msg, throwable);
    this.workBook = workbook;
    this.sheet = sheet;
    this.errorCode = errorCode;
  }

  /**
   * Custom exception class taking four parameter
   * 
   * @param msg
   *            as string
   * @param workbook
   *            workbookname as string
   * @param errorCode
   *            errorcode as integer
   * @param throwable
   *            as exception onbject
   */
  public ExcelException(String msg, String workbook, int errorCode, Throwable throwable) {
    super(msg, throwable);
    this.workBook = workbook;
    this.errorCode = errorCode;
  }

  /**
   * Custom exception class taking four parameter
   * 
   * @param msg
   *            as string
   * @param workbook
   *            workbookname as string
   * @param sheet
   *            sheetname as string
   * @param errorCode
   *            errorcode as int
   */
  public ExcelException(String msg, String workbook, String sheet, int errorCode) {
    super(msg);
    this.workBook = workbook;
    this.sheet = sheet;
    this.errorCode = errorCode;
  }

  /**
   * Custom exception class taking three parameter
   * 
   * @param msg
   *            as string
   * @param workbook
   *            workbookname as string
   * @param errorCode
   *            errorcode as int
   */
  public ExcelException(String msg, String workbook, int errorCode) {
    super(msg);
    this.workBook = workbook;
    this.errorCode = errorCode;
  }

  /**
   *
   * @return workbookname as string
   */
  public String getWorkBook() {
    return workBook;
  }

  /**
   *
   * @return sheetname as string
   */
  public String getSheet() {
    return sheet;
  }

  /**
   *
   * @return error code as int
   */
  public int getErrorCode() {
    return errorCode;
  }

}

C:\Users\ir\newworkspace\test-automation-sfm\src\test\java\com\fanniemae\sfm\automation\utils\excel\ExcelReader.java

package com.fanniemae.sfm.automation.utils.excel;

import com.fanniemae.fbacore.automation.helpers.Constants;
import com.fanniemae.fbacore.automation.helpers.SheetVO;
import com.fanniemae.testeng.automation.utils.CucumberLogUtils;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Excel Reader is used for parsing the excel file. this has basic two methods
 * a) method for getting the value based on the filter condition b) method for
 * comparing if two or more columns match the values against all the rows
 * 
 * @author 
 * @version 1.0
 * @since 6/21/2017
 *
 */
public class ExcelReader {

  // logger variable
  private static Logger logger = Logger.getLogger(ExcelReader.class);

  // File input stream variable
  FileInputStream file;
  // Workbook variable
  Workbook workbook;
  // Stroes the file path on where the file is writtern
  private String filePath;
  // Sheet Name
  Sheet sheet;
  // File Name
  String fileName;

  Row row = null;
  Cell cell = null;

  static DecimalFormat df1 = new DecimalFormat(".#####");
  static DecimalFormat df2 = new DecimalFormat(".#####");


  // Sheet length allowed by MS Excel
  private final static int SHEET_NAME_SIZE = 31;

  /**
   * Restricting from creating default object
   */
  @SuppressWarnings("unused")
  private ExcelReader() {
  }

  /**
   * ExcelWriter Constructor taking the paramerter of Filename
   * 
   * @param fileName
   *            Filename for the workbook
   */
  public ExcelReader(String fileName) throws ExcelException {
    try {
      this.fileName = fileName;
      // has the file object
      File f = new File(fileName);
      // stores the filepath
      filePath = f.getAbsolutePath();
      // Creating a file stream
      file = new FileInputStream(f);
      // Get the workbook instance for XLSX file
      workbook = new XSSFWorkbook(file);
      file.close();
      // Default name
    } catch (IOException e) {
      logger.error("File [" + fileName + "][" + Constants.WORKBOOK_NOT_FOUND + "] not accessible or not present",
          e);
      throw new ExcelException("File not accessible or not present", fileName, Constants.WORKBOOK_NOT_FOUND, e);
    } catch (Exception ex) {
      logger.error("File [" + fileName + "][" + Constants.GENERAL_ERROR + "] not accessible or not present", ex);
      throw new ExcelException("File not accessible", fileName, Constants.GENERAL_ERROR, ex);
    }
  }

  /**
   * ExcelWriter Constructor taking the paramerter of Filename
   * 
   * @param fileName
   *            Filename for the workbook
   */
  public ExcelReader(String fileName, String sheetName) throws ExcelException {
    try {
      this.fileName = fileName;
      // has the file object
      File f = new File(fileName);
      // stores the filepath
      filePath = f.getAbsolutePath();
      // Creating a file stream
      file = new FileInputStream(f);
      // Get the workbook instance for XLSX file
      workbook = new XSSFWorkbook(file);
      file.close();
      //sheetName = getClnSheetName(sheetName);
      if(sheetName.length()>SHEET_NAME_SIZE) sheetName = sheetName.substring(0,SHEET_NAME_SIZE);
      // Create a sheet
      sheet = workbook.getSheet(sheetName);
    } catch (IOException e) {
      logger.error("File [" + fileName + "][" + Constants.WORKBOOK_NOT_FOUND + "] not accessible or not present",
          e);
      throw new ExcelException("File not accessible or not present", fileName, Constants.WORKBOOK_NOT_FOUND, e);
    } catch (Exception ex) {
      logger.error("File [" + fileName + "][" + Constants.GENERAL_ERROR + "] not accessible or not present", ex);
      throw new ExcelException("File not accessible", fileName, Constants.GENERAL_ERROR, ex);
    }
  }

  /**
   * This method returns the value based on the filter condition provided in
   * the sheet name
   * 
   * @param sheetName
   *            sheet name as string
   * @param requiredColumn
   *            column name for which the value is expected
   * @param filterCol
   *            filter column name for which filter has to be matched
   * @param filterValue
   *            value which has to be matched in the filter column
   * @return string as value
   */
  public String getCellData(String sheetName, String requiredColumn, String filterCol, String filterValue)
      throws ExcelException {
    logger.info("Sheet " + sheetName + " Return Column " + requiredColumn + " Filter Col " + filterCol
        + " Filter Value " + filterValue);
    int colNum = -1, reqColNum = -1;
    int rowNum = -1;

    try {
      //sheetName = getClnSheetName(sheetName);
      if(sheetName.length()>SHEET_NAME_SIZE) sheetName = sheetName.substring(0,SHEET_NAME_SIZE);
      sheet = workbook.getSheet(sheetName);
      row = sheet.getRow(0);
      for (int i = 0; i < row.getLastCellNum(); i++) {
        if (row.getCell(i).getStringCellValue().trim().equals(filterCol.trim()))
          colNum = i;

        if (row.getCell(i).getStringCellValue().trim().equals(requiredColumn.trim()))
          reqColNum = i;

      }

      if (colNum == -1)
        throw new ExcelException(" Filter column [" + filterCol + " not found ", fileName, sheetName,
            Constants.COLUMN_NOT_FOUND);

      if (reqColNum == -1)
        throw new ExcelException(" Returning column [" + requiredColumn + " not found ", fileName, sheetName,
            Constants.COLUMN_NOT_FOUND);

      // System.out.println("Col Num " + colNum + " Row Num " +
      // reqColNum);
      String cellValue;

      for (Row row : sheet) {
        Cell cell = row.getCell(colNum);
        // System.out.println("Cell type " + cell.getCellType());
        if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
          if (cell.getRichStringCellValue().getString().trim().equals(filterValue)) {
            rowNum = row.getRowNum();
            break;
          }
        } else if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC
            || cell.getCellType() == Cell.CELL_TYPE_FORMULA) {
          if (DateUtil.isCellDateFormatted(cell)) {
            // 01MAR2017
            DateFormat df = new SimpleDateFormat("ddMMMyyyy");
            Date date = cell.getDateCellValue();
            cellValue = df.format(date);

            if (cellValue.equals(filterValue)) {
              rowNum = row.getRowNum();
              break;
            }
          } else {
            filterValue = new Double(filterValue).toString();
            cellValue = String.valueOf(new Double(cell.getNumericCellValue()));
            // System.out.println("numeric " + filterValue);

            if (cellValue.equals(filterValue)) {
              rowNum = row.getRowNum();
              break;
            }
          }
          // System.out.println(cellValue + " ExcelReader.getCellData
          // " + filterValue);

        }
      }

      // rownum will be -1 if none of them match
      if (rowNum == -1)
        throw new ExcelException(
            " Filter condition does not match for the condition [" + filterCol + " : " + filterValue + "]",
            fileName, sheetName, Constants.CONDITION_DOES_NOT_MATCH);
      // System.out.println(" Result Row Num " + rowNum);

      cellValue = "";
      row = sheet.getRow(rowNum);
      cell = row.getCell(reqColNum);

      if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
        return cell.getStringCellValue();
      } else if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC || cell.getCellType() == Cell.CELL_TYPE_FORMULA) {
        if (DateUtil.isCellDateFormatted(cell)) {
          DateFormat df = new SimpleDateFormat("dd/MM/yy");
          Date date = cell.getDateCellValue();
          cellValue = df.format(date);
        } else if (cell.getCellType() == Cell.CELL_TYPE_FORMULA) {
          FormulaEvaluator formulaEval = workbook.getCreationHelper().createFormulaEvaluator();
          cellValue = Double.toString(formulaEval.evaluate(cell).getNumberValue());
        } else {

          cellValue = String.valueOf(cell.getNumericCellValue());

        }
        // System.out.println("got output " + cellValue);
        return cellValue;
      } else if (cell.getCellType() == Cell.CELL_TYPE_BLANK)
        return "";
      else
        return String.valueOf(cell.getBooleanCellValue());
    } catch (IllegalArgumentException ex) {
      System.out.println("row " + rowNum + " or column " + colNum + " does not exist  in Excel");
      throw new ExcelException(" Filter column not found ", fileName, sheetName,
          Constants.FILTER_COLUMN_NOT_FOUND, ex);
    } catch (Exception e) {
      e.printStackTrace();
      System.out.println("row " + rowNum + " or column " + colNum + " does not exist  in Excel");
      throw new ExcelException(" Filter condition not found ", fileName, sheetName,
          Constants.CONDITION_DOES_NOT_MATCH, e);
    }
  }

  /**
   * Returns the workbook object
   * 
   * @return XSSFWorkbook object
   */
  public Workbook getWorkbook() {
    return workbook;
  }

  /**
   * Returns the workbook object
   * 
   * @return XSSFWorkbook object
   */
  public String getWorkbookPath() {
    return filePath;
  }

  /**
   * Data comparison takes the input as sheetvo as list. This sheetvo will
   * hold sheetname and column name the comparison can be done for two or more
   * columns. the column is match against the rows and if the value does not
   * match then it returns false
   * 
   * @param sheetList
   *            Sheetvo objects in the list
   * @return true or false. if all matches true else its false
   * @throws ExcelException
   */
  public boolean dataComparison(List<SheetVO> sheetList) throws ExcelException {
    // logger.info("Sheet " + sheetName + " Return Column " + requiredColumn
    // + " Filter Col "+ filterCol + " Filter Value " + filterValue );
    Set<String> compartor = new HashSet<String>();
    boolean status = false;
    String cellValue = "";
    int rowCount = 0;
    String lSheetName;

    try {
      System.out.println("input " + sheetList);

      List<SheetVO> infoList = new ArrayList<SheetVO>();

      for (SheetVO entry : sheetList) {
        // System.out.println("Key : " + entry.getKey() + " Value : " +
